#include <WiFi.h>
#include <WiFiUdp.h>

// WiFi credentials
const char* ssid = "YOUR WIFI NAME";
const char* password = "YOUR WIFI PASSWORD";

// UDP Configuration
WiFiUDP udp;
const int udpPort = 8080;
char incomingPacket[255];

// Pin configurations for each lane (4 lanes)
const int redPins[]    = {18, 15, 23, 25};
const int yellowPins[] = {5,  2,  22, 26};
const int greenPins[]  = {19, 4,  13, 27};

// Signal timing control
unsigned long greenStartTime = 0;
unsigned long allocatedGreenTime = 0;
bool isGreenActive = false;
int currentLane = -1;

// Function declarations
void setSignal(int lane, String state, unsigned long duration = 0);
void setAllRed();
void handlePacket(char* packet);
void setManualYellow(int lane, unsigned long duration);
void setManualRed(int lane);

void setup() {
  Serial.begin(9600);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected!");
  Serial.print("ESP32 IP: ");
  Serial.println(WiFi.localIP());

  // Start UDP
  udp.begin(udpPort);
  Serial.printf("Listening on UDP port %d...\n", udpPort);

  // Initialize pins
  for (int i = 0; i < 4; i++) {
    pinMode(redPins[i], OUTPUT);
    pinMode(yellowPins[i], OUTPUT);
    pinMode(greenPins[i], OUTPUT);
    digitalWrite(redPins[i], HIGH);  // Set all to red initially
  }
}

void loop() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    int len = udp.read(incomingPacket, sizeof(incomingPacket) - 1);
    if (len > 0) {
      incomingPacket[len] = '\0';
      Serial.printf("Received packet: %s\n", incomingPacket);
      handlePacket(incomingPacket);
    }
  }

  // Auto switch to RED after green duration
  if (isGreenActive && (millis() - greenStartTime >= allocatedGreenTime)) {
    Serial.printf("Lane %d: YELLOW (1.5 sec)\n", currentLane);
    digitalWrite(greenPins[currentLane - 1], LOW);
    digitalWrite(yellowPins[currentLane - 1], HIGH);
    delay(1500);
    Serial.printf("Lane %d: RED\n", currentLane);
    digitalWrite(yellowPins[currentLane - 1], LOW);
    digitalWrite(redPins[currentLane - 1], HIGH);
    isGreenActive = false;
    currentLane = -1;
  }
}

// ========== SIGNAL FUNCTIONS ========== //

void setSignal(int lane, String state, unsigned long duration) {
  int index = lane - 1;

  setAllRed();

  if (state == "GREEN") {
    Serial.printf("Lane %d: YELLOW (1.5 sec)\n", lane);
    digitalWrite(redPins[index], LOW);
    digitalWrite(yellowPins[index], HIGH);
    delay(1500);

    Serial.printf("Lane %d: GREEN (%lu ms)\n", lane, duration);
    digitalWrite(yellowPins[index], LOW);
    digitalWrite(greenPins[index], HIGH);

    greenStartTime = millis();
    allocatedGreenTime = duration;
    isGreenActive = true;
    currentLane = lane;
  }
}

void setAllRed() {
  for (int i = 0; i < 4; i++) {
    digitalWrite(redPins[i], HIGH);
    digitalWrite(yellowPins[i], LOW);
    digitalWrite(greenPins[i], LOW);
  }
}

void setManualYellow(int lane, unsigned long duration) {
  Serial.printf("Lane %d: YELLOW (manual, %lu ms)\n", lane, duration);
  setAllRed();
  digitalWrite(redPins[lane - 1], LOW);
  digitalWrite(yellowPins[lane - 1], HIGH);
  delay(duration > 0 ? duration : 1500);
  digitalWrite(yellowPins[lane - 1], LOW);
  digitalWrite(redPins[lane - 1], HIGH);
}

void setManualRed(int lane) {
  Serial.printf("Lane %d: RED\n", lane);
  setAllRed();
}

// ========== PACKET HANDLER ========== //

void handlePacket(char* packet) {
  int lane = packet[0] - '0';
  if (lane < 1 || lane > 4) {
    Serial.println("Invalid lane number!");
    return;
  }

  String data = String(packet + 2);
  unsigned long duration = 10000;
  int commaIndex = data.indexOf(',');

  String state;
  if (commaIndex != -1) {
    state = data.substring(0, commaIndex);
    duration = data.substring(commaIndex + 1).toInt();
  } else {
    state = data;
  }

  state.trim();
  state.toUpperCase();

  if (state == "GREEN") {
    setSignal(lane, state, duration);
  } else if (state == "YELLOW") {
    setManualYellow(lane, duration);
  } else if (state == "RED") {
    setManualRed(lane);
  } else {
    Serial.println("Invalid state!");
  }
}
